[project]
name = "tensorzero-scratch"
version = "0.1.0"
description = "Exploring TensorZero - an open-source platform for industrial-grade LLM applications"
requires-python = ">=3.11"
dependencies = [
    "tensorzero>=0.1.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.0",
    "pytz>=2023.3",
    "rich>=13.0.0",
    "langgraph>=0.1.0",
    "langchain>=0.1.0",
    "openai>=1.0.0",
    "anthropic>=0.15.0",
    "langchain_openai>=0.3.32"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "black>=23.0.0",
    "isort>=5.12.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/tensorzero_scratch"]

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C",    # flake8-comprehensions
    "SIM",  # flake8-simplify
]
ignore = ["E501"]  # line length handled by black

[tool.black]
line-length = 88
target-version = ['py311']

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.poe.tasks]
# Setup and dependencies
setup = [
    {cmd = "uv sync --all-extras"},
    {cmd = "echo 'Environment setup complete!'"},
]

# Docker commands
up = "docker compose up -d"
down = "docker compose down"
logs = "docker compose logs -f"
ps = "docker compose ps"

# Development commands
notebook = "jupyter lab notebooks/"
test = "pytest tests/ -v"
lint = "ruff check ."
format = [
    {cmd = "ruff format"},
    {cmd = "ruff check . --fix"},
]
typecheck = "mypy ."

# TensorZero specific
gateway = "docker compose up tensorzero-gateway -d"
ui = {shell = "open http://localhost:4000 || xdg-open http://localhost:4000"}
clickhouse = "docker compose up clickhouse -d"
agent = "python run_agent.py"
agent-demo = "python run_agent.py --demo"

# Utility commands
clean = [
    {cmd = "find . -type d -name '__pycache__' -exec rm -rf {} +"},
    {cmd = "find . -type f -name '*.pyc' -delete"},
    {cmd = "find . -type d -name '.mypy_cache' -exec rm -rf {} +"},
    {cmd = "find . -type d -name '.pytest_cache' -exec rm -rf {} +"},
    {cmd = "find . -type d -name '.ruff_cache' -exec rm -rf {} +"},
]

env-check = {shell = "echo 'Required environment variables:' && echo '- OPENAI_API_KEY' && echo '- ANTHROPIC_API_KEY' && echo '- XAI_API_KEY'"}

# Combined commands
dev = [
    {ref = "up"},
    {ref = "notebook"},
]

check = [
    {ref = "lint"},
    {ref = "typecheck"},
    {ref = "test"},
]